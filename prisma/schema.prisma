generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Experience {
  id         Int       @id @default(autoincrement())
  title      String    
  role       String    
  company    String    
  location   String    
  startDate  DateTime  @map("start_date")
  endDate    DateTime? @map("end_date")
  content    String    @db.Text
  highlights String[]
  tags       Tag[]     @relation("ExperienceToTag")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("experiences")
}

model Project {
  id           Int      @id @default(autoincrement())
  title        String
  subtitle     String
  description  String   @db.Text
  content      String?  @db.Text
  imageUrl     String   @map("image_url")
  thumbnailUrl String?  @map("thumbnail_url")
  images       String[] 
  githubUrl    String?  @map("github_url")
  liveUrl      String?  @map("live_url")
  featured     Boolean  @default(false)
  order        Int      @default(0)
  tags         Tag[]    @relation("ProjectToTag")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model Blog {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String    @db.Text
  content     String    @db.Text
  excerpt     String?   @db.Text
  imageUrl    String?   @map("image_url")
  images      String[]  
  published   Boolean   @default(false)
  publishedAt DateTime? @map("published_at")
  featured    Boolean   @default(false)
  readingTime Int?      @map("reading_time")
  views       Int       @default(0)
  tags        Tag[]     @relation("BlogToTag")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("blogs")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  iconUrl     String?      @map("icon_url")
  isTech      Boolean      @default(false) @map("is_tech")
  experiences Experience[] @relation("ExperienceToTag")
  projects    Project[]    @relation("ProjectToTag")
  blogs       Blog[]       @relation("BlogToTag")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("tags")
}

model Contact {
  id          Int      @id @default(autoincrement())
  needs       String
  name        String
  email       String
  projectType String   @map("project_type")
  budget      String
  additional  String?
  status      String   @default("new") 
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}